<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>SOS Game - AI Edition</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    :root {
      --bg-light: #f0f2f5; --text-light: #1c1e21; --card-bg-light: rgba(255, 255, 255, 0.9); --board-bg-light: rgba(255, 255, 255, 0.75); --cell-bg-light: #ffffff; --cell-border-light: #dcdfe3;
      --bg-dark: #18191a; --text-dark: #e4e6eb; --card-bg-dark: rgba(58, 59, 60, 0.9); --board-bg-dark: rgba(44, 45, 46, 0.75); --cell-bg-dark: #3a3b3c; --cell-border-dark: #4e4f50;
      --bg-skyblue: #e6f3ff; --text-skyblue: #003366; --card-bg-skyblue: rgba(255, 255, 255, 0.9);
      --bg-lightgreen: #e9f5e9; --text-lightgreen: #004d00; --card-bg-lightgreen: rgba(255, 255, 255, 0.9);
      --highlight-color: #00BFFF; --transition-speed: 0.5s; --winner-bg: linear-gradient(135deg, #6dd5ed, #2193b0);
    }
    html, body { height: 100%; margin: 0; overflow: hidden; font-family: 'Arial', sans-serif; transition: background-color var(--transition-speed); }
    #app-container { position: relative; width: 100%; height: 100%; background: var(--bg-light); color: var(--text-light); transition: background var(--transition-speed), color var(--transition-speed); }
    body.dark #app-container { background: var(--bg-dark); color: var(--text-dark); }
    body.dark .player-card, body.dark .setup-box, body.dark #game-header { background: var(--card-bg-dark); }
    body.dark #board { background: var(--board-bg-dark); border-color: #777; }
    body.dark .cell { background: var(--cell-bg-dark); border-color: var(--cell-border-dark); }
    body.dark .button, body.dark .letter-buttons button { background: #4e4f50; color: var(--text-dark); }
    body.dark .button:hover, body.dark .letter-buttons button:hover { background: #606162; }
    body.dark .modal-content { background-color: #2c2c2c; color: var(--text-dark); }
    body.skyblue #app-container { background: var(--bg-skyblue); color: var(--text-skyblue); }
    body.skyblue .player-card, body.skyblue .setup-box, body.skyblue #game-header { background: var(--card-bg-skyblue); }
    body.skyblue .button, body.skyblue .letter-buttons button { background: #2c5d87; color: white; }
    body.skyblue .button:hover, body.skyblue .letter-buttons button:hover { background: #4682B4; }
    body.lightgreen #app-container { background: var(--bg-lightgreen); color: var(--text-lightgreen); }
    body.lightgreen .player-card, body.lightgreen .setup-box, body.lightgreen #game-header { background: var(--card-bg-lightgreen); }
    body.lightgreen .button, body.lightgreen .letter-buttons button { background: #2E8B57; color: white; }
    body.lightgreen .button:hover, body.lightgreen .letter-buttons button:hover { background: #3CB371; }
    .animated-title { font-size: 3.5rem; font-weight: 900; text-transform: uppercase; background: linear-gradient(90deg, #ff7e5f, #feb47b, #86a8e7, #91eae4, #ff7e5f); background-size: 600% 100%; -webkit-background-clip: text; background-clip: text; color: transparent; animation: shimmer 10s linear infinite; text-shadow: 2px 2px 10px rgba(0,0,0,0.2); margin-bottom: 20px; }
    @keyframes shimmer { 0% { background-position: 0% 50%; } 100% { background-position: 100% 50%; } }
    .screen { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; box-sizing: border-box; padding: 20px; background-size: cover; background-position: center; transition: opacity 0.5s; }
    #setupScreen { background-image: url('https://images.unsplash.com/photo-1614850523011-8f49ffc73908?auto=format&fit=crop&w=1500&q=80'); z-index: 10; overflow-y: auto; }
    #gameArea { background-image: url('https://images.unsplash.com/photo-1553095066-5014bc7b7f2d?auto=format&fit=crop&w=1500&q=80'); display: none; z-index: 5; justify-content: flex-start; padding-top: 0; }
    .setup-box { backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.8); padding: 25px; border-radius: 25px; box-shadow: 0 12px 50px rgba(0,0,0,0.5); width: 95%; max-width: 850px; text-align: center; border: 1px solid rgba(255,255,255,0.2); }
    .game-mode-selector { margin-bottom: 20px; font-size: 1.2rem; }
    .game-mode-selector label { margin: 0 15px; cursor: pointer; }
    .player-inputs { display: flex; justify-content: space-around; flex-wrap: wrap; text-align: left; }
    .player-setup { padding: 15px; margin: 10px; border: 1px solid #ccc; border-radius: 15px; transition: opacity 0.3s; }
    .player-setup.disabled { opacity: 0.5; pointer-events: none; }
    .player-setup h3 { text-align: center; margin-top: 0; }
    .player-setup input { font-size: 16px; padding: 12px; margin: 5px 0; width: 100%; box-sizing: border-box; border: 1px solid #ccc; border-radius: 10px; }
    .key-input { display: flex; justify-content: space-between; align-items: center; margin: 5px 0; }
    .key-input input[type="text"] { width: 120px; text-align: center; cursor: pointer; }
    .button { padding: 15px 30px; font-size: 18px; margin: 10px; border: none; border-radius: 12px; background: #333; color: #fff; cursor: pointer; box-shadow: 0 8px 25px rgba(0,0,0,0.3); transition: all 0.2s ease-in-out; font-weight: 600; text-transform: uppercase; letter-spacing: 1px; }
    .button:hover { transform: translateY(-3px) scale(1.05); box-shadow: 0 12px 30px rgba(0,0,0,0.4); }
    .button:active { transform: translateY(-1px) scale(1.02); }
    #game-header { width: 100%; max-width: 1200px; padding: 15px; margin-top: 10px; backdrop-filter: blur(8px); background: rgba(255, 255, 255, 0.7); border-radius: 20px; box-shadow: 0 6px 20px rgba(0,0,0,0.15); text-align: center; position: relative; }
    #game-header .animated-title { font-size: 2.5rem; margin-bottom: 8px; margin-top: 5px; }
    .game-status-bar { display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; }
    .turn { font-size: 22px; font-weight: 600; transition: transform 0.3s; }
    #endMessage { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%) scale(0.5); font-size: 2.5rem; font-weight: bold; background: var(--winner-bg); color: white; border-radius: 20px; display: none; align-items: center; justify-content: center; z-index: 1000; padding: 40px 60px; box-shadow: 0 20px 60px rgba(0,0,0,0.4); text-shadow: 2px 2px 8px rgba(0,0,0,0.3); transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275); }
    #endMessage.show { display: flex; transform: translate(-50%, -50%) scale(1); }
    .game-layout { display: flex; justify-content: space-around; align-items: flex-start; flex-wrap: wrap; width: 100%; max-width: 1300px; margin-top: 20px; }
    .player-card { width: 220px; padding: 20px; margin: 10px; border-radius: 20px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); background: var(--card-bg-light); text-align: center; transition: all var(--transition-speed); border: 3px solid transparent; }
    .player-card.active { transform: scale(1.1); box-shadow: 0 12px 40px rgba(0,0,0,0.25); border-color: var(--highlight-color); }
    .player-card h3 { margin-top: 0; font-size: 1.6rem; }
    #board { display: grid; grid-template-columns: repeat(6, 65px); grid-template-rows: repeat(6, 65px); gap: 5px; padding: 12px; background: var(--board-bg-light); border: 4px solid #333; border-radius: 15px; position: relative; }
    .cell { width: 65px; height: 65px; font-size: 32px; border: 2px solid var(--cell-border-light); display: flex; align-items: center; justify-content: center; font-weight: bold; background: var(--cell-bg-light); cursor: pointer; transition: all .2s ease; }
    .cell:hover { transform: scale(1.05); background-color: #e8e8e8; }
    body.dark .cell:hover { background-color: #4a4b4c; }
    .highlighted-cell { outline: 4px solid var(--highlight-color); outline-offset: -4px; z-index: 10; }
    .line { position: absolute; height: 6px; background: red; transform-origin: left center; z-index: 5; border-radius: 5px; box-shadow: 0 0 10px 2px red; animation: drawLine 0.5s ease-out; }
    @keyframes drawLine { from { width: 0; } to { /* width is set by JS */ } }
    .letter-buttons button { font-size: 20px; padding: 10px 20px; border-radius: 10px; border: none; background: #333; color: #fff; cursor: pointer; transition: all 0.2s; }
    .letter-buttons button.selected { background: var(--highlight-color); transform: scale(1.1); }
    .modal { display: none; position: fixed; z-index: 2000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.7); backdrop-filter: blur(5px); }
    .modal-content { background-color: #fefefe; margin: 15% auto; padding: 30px; border: 1px solid #888; width: 90%; max-width: 400px; border-radius: 15px; text-align: center; background-size: cover; background-position: center; position: relative; box-shadow: 0 10px 40px rgba(0,0,0,0.5); }
    #themeSelector .modal-content { background-image: url('https://images.unsplash.com/photo-1502691876148-a84978e59af8?auto=format&fit=crop&w=1500&q=80'); }
    .modal-content h2 { margin-top: 0; color: #fff; text-shadow: 1px 1px 3px #000; }
    .close-button { color: #fff; position: absolute; top: 10px; right: 20px; font-size: 32px; font-weight: bold; cursor: pointer; text-shadow: 1px 1px 3px #000; }
  </style>
</head>
<body>

<div id="app-container">
  
  <div id="setupScreen" class="screen">
    <div class="setup-box">
        <h1 class="animated-title">SOS Game</h1>
        <div class="game-mode-selector">
            <label><input type="radio" name="gameMode" value="pvp" checked onchange="togglePlayer2Setup(true)"> Player vs Player</label>
            <label><input type="radio" name="gameMode" value="pva" onchange="togglePlayer2Setup(false)"> Player vs AI</label>
        </div>
        <div class="player-inputs">
            <div class="player-setup" id="p1_setup">
                <h3>Player 1</h3>
                <input type="text" id="p1_name" placeholder="Player 1 Name" value="Player 1" />
                <input type="color" id="p1_color" value="#FF7F7F" />
            </div>
            <div class="player-setup" id="p2_setup">
                <h3>Player 2</h3>
                <input type="text" id="p2_name" placeholder="Player 2 Name" value="Player 2" />
                <input type="color" id="p2_color" value="#87CEEB" />
            </div>
        </div>
        <button class="button" onclick="startGame()">Start Game</button>
        <button class="button" onclick="resumeGame()" id="resumeBtn" style="display:none;">Resume Game</button>
    </div>
  </div>

  <div id="gameArea" class="screen">
    <div id="game-header">
        <h1 class="animated-title">SOS Game</h1>
        <div class="game-status-bar">
            <div class="turn" id="turnDisplay"></div>
            <div class="turn">Selected: <span id="currentLetter" style="font-weight: bold;">S</span></div>
        </div>
        <div class="letter-buttons">
          <button id="btn-S" class="selected" onclick="selectLetter('S')">S</button>
          <button id="btn-O" onclick="selectLetter('O')">O</button>
        </div>
        <div class="game-controls">
            <button class="button" onclick="restartGame()">Restart</button>
            <button class="button" onclick="showThemeSelector()">Themes</button>
            <button class="button" onclick="resetGame()">New Game</button>
        </div>
    </div>
    <div class="game-layout">
      <div class="player-card" id="p1Card"><h3 id="p1Name"></h3><div id="p1Score"></div></div>
      <div id="board-container"><div id="board"></div></div>
      <div class="player-card" id="p2Card"><h3 id="p2Name"></h3><div id="p2Score"></div></div>
    </div>
  </div>
  
  <div id="endMessage"></div>

  <div id="themeSelector" class="modal">
    <div class="modal-content">
      <span class="close-button" onclick="closeThemeSelector()">&times;</span>
      <h2>Select a Theme</h2>
      <button class="button" onclick="changeTheme('light')">Light</button>
      <button class="button" onclick="changeTheme('dark')">Dark</button>
      <button class="button" onclick="changeTheme('skyblue')">Sky Blue</button>
      <button class="button" onclick="changeTheme('lightgreen')">Light Green</button>
    </div>
  </div>
</div>

<script>
    const boardSize = 6;
    let currentPlayer = 0;
    let players = [];
    let selectedLetter = "S";
    let grid = [];
    let filledCells = 0;
    let gameActive = true;
    let gameMode = 'pvp'; // 'pvp' or 'pva'
    let highlightedCell = { r: 0, c: 0 };

    const setupScreen = document.getElementById('setupScreen');
    const gameArea = document.getElementById('gameArea');
    const themeModal = document.getElementById('themeSelector');
    
    // --- Sound Boost ---
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const gainNode = audioContext.createGain();
    gainNode.gain.value = 1.5; // Boost volume
    gainNode.connect(audioContext.destination);

    function loadSound(url) {
        const sound = new Audio(url);
        const source = audioContext.createMediaElementSource(sound);
        source.connect(gainNode);
        sound.preload = 'auto';
        return sound;
    }

    const placeSound = loadSound('https://cdn.pixabay.com/audio/2022/03/15/audio_2c4a3a7927.mp3');
    const scoreSound = loadSound('https://cdn.pixabay.com/audio/2022/03/10/audio_bd435d345c.mp3');
    const winSound = loadSound('https://cdn.pixabay.com/audio/2022/01/18/audio_45b4c77b9a.mp3');
    const aiTurnSound = loadSound('https://cdn.pixabay.com/audio/2022/03/07/audio_eb34c32d0d.mp3');

    function playSound(sound) {
        if (audioContext.state === 'suspended') {
            audioContext.resume();
        }
        sound.currentTime = 0;
        sound.play().catch(error => console.log(`Error playing sound: ${error.message}`));
    }
    
    window.onload = () => {
      if (localStorage.getItem("sosGameSetup")) document.getElementById("resumeBtn").style.display = "inline-block";
      const savedTheme = localStorage.getItem("sosTheme") || 'light';
      document.body.className = savedTheme;
    };
    
    function togglePlayer2Setup(isPvp) {
        document.getElementById('p2_setup').classList.toggle('disabled', !isPvp);
        if(!isPvp) {
            document.getElementById('p2_name').value = "Computer";
        } else {
            document.getElementById('p2_name').value = "Player 2";
        }
    }

    function changeTheme(theme) {
        document.body.className = '';
        document.body.classList.add(theme);
        localStorage.setItem('sosTheme', theme);
        closeThemeSelector();
    }
    
    function showThemeSelector() { themeModal.style.display = 'block'; }
    function closeThemeSelector() { themeModal.style.display = 'none'; }

    function startGame(resume = false) {
      gameMode = document.querySelector('input[name="gameMode"]:checked').value;
      const name1 = document.getElementById("p1_name").value || "Player 1";
      const name2 = (gameMode === 'pva') ? "Computer" : (document.getElementById("p2_name").value || "Player 2");
      const color1 = document.getElementById("p1_color").value;
      const color2 = document.getElementById("p2_color").value;
      
      players = [ { name: name1, color: color1, score: 0 }, { name: name2, color: color2, score: 0 } ];
      
      if (!resume) localStorage.setItem("sosGameSetup", JSON.stringify({name1, color1, name2, color2, gameMode}));

      document.getElementById("p1Name").textContent = name1; document.getElementById("p2Name").textContent = name2;
      document.getElementById("p1Name").style.color = color1; document.getElementById("p2Name").style.color = color2;
      
      setupScreen.style.display = "none"; gameArea.style.display = "flex";
      restartGame();
    }

    function resumeGame() {
        const savedSetup = JSON.parse(localStorage.getItem("sosGameSetup"));
        if(savedSetup){
            document.getElementById("p1_name").value = savedSetup.name1; document.getElementById("p1_color").value = savedSetup.color1;
            document.getElementById("p2_name").value = savedSetup.name2; document.getElementById("p2_color").value = savedSetup.color2;
            document.querySelector(`input[name="gameMode"][value="${savedSetup.gameMode}"]`).checked = true;
            togglePlayer2Setup(savedSetup.gameMode === 'pvp');
        }
      startGame(true);
    }
    
    function updateHighlight() {
        document.querySelectorAll('.cell').forEach(cell => cell.classList.remove('highlighted-cell'));
        const targetCell = document.querySelector(`.cell[data-row='${highlightedCell.r}'][data-col='${highlightedCell.c}']`);
        if (targetCell) targetCell.classList.add('highlighted-cell');
    }

    function createBoard() {
      const board = document.getElementById("board");
      board.innerHTML = "";
      for (let r = 0; r < boardSize; r++) {
        for (let c = 0; c < boardSize; c++) {
          const cell = document.createElement("div");
          cell.className = "cell"; cell.dataset.row = r; cell.dataset.col = c;
          cell.onclick = () => {
            if (gameMode === 'pva' && currentPlayer === 1) return; // Block clicks during AI turn
            highlightedCell = {r, c};
            updateHighlight();
            handleMove(r, c);
          }
          board.appendChild(cell);
        }
      }
      updateHighlight();
    }
    
    function restartGame() {
        grid = Array.from({ length: boardSize }, () => Array(boardSize).fill(""));
        filledCells = 0; gameActive = true; currentPlayer = 0; highlightedCell = { r: 0, c: 0 };
        if(players && players.length > 0) {
            players.forEach(p => p.score = 0);
            updateScores(); updateTurn();
        }
        createBoard(); 
        document.getElementById("endMessage").classList.remove('show');
    }

    function selectLetter(letter) { 
        selectedLetter = letter; 
        document.getElementById("currentLetter").textContent = letter;
        document.getElementById('btn-S').classList.toggle('selected', letter === 'S');
        document.getElementById('btn-O').classList.toggle('selected', letter === 'O');
    }

    function handleMove(row, col) {
      if (!gameActive || grid[row][col]) return;
      const cell = document.querySelector(`.cell[data-row='${row}'][data-col='${col}']`);
      grid[row][col] = selectedLetter; cell.textContent = selectedLetter; cell.style.color = players[currentPlayer].color; filledCells++;
      playSound(placeSound);
      
      const scored = checkSOS(row, col);
      updateScores();

      if (!scored) {
        currentPlayer = 1 - currentPlayer;
      }
      
      updateTurn();
      
      if (filledCells === boardSize * boardSize) {
        showWinner();
        return;
      }

      if (gameMode === 'pva' && currentPlayer === 1 && gameActive) {
        setTimeout(computerMove, 1000); // AI "thinks" for a second
      }
    }

    function checkSOS(r, c) {
        const dirs = [ [0, 1], [1, 0], [1, 1], [1, -1], [-1,-1], [-1,0], [-1,1], [0,-1] ];
        const o_dirs = [ [0, 1], [1, 0], [1, 1], [1, -1] ]; 
        let scored = false;
        const checkAndScore = (r1, c1, r2, c2) => {
            drawLine(r1, c1, r2, c2); players[currentPlayer].score++; scored = true; playSound(scoreSound);
        };
        if (grid[r][c] === 'O') {
            for (let [dr, dc] of o_dirs) {
                const r_b = r - dr, c_b = c - dc, r_a = r + dr, c_a = c + dc;
                if(inBounds(r_b, c_b) && inBounds(r_a, c_a) && grid[r_b][c_b] === 'S' && grid[r_a][c_a] === 'S') checkAndScore(r_b, c_b, r_a, c_a);
            }
        } else { // Placed 'S'
            for (let [dr, dc] of dirs) {
                const r_m = r + dr, c_m = c + dc, r_e = r + 2 * dr, c_e = c + 2 * dc;
                if(inBounds(r_m, c_m) && inBounds(r_e, c_e) && grid[r_m][c_m] === 'O' && grid[r_e][c_e] === 'S') checkAndScore(r, c, r_e, c_e);
            }
        }
        return scored;
    }

    function inBounds(r, c) { return r >= 0 && r < boardSize && c >= 0 && c < boardSize; }

    function drawLine(r1, c1, r2, c2) {
      const board = document.getElementById("board"), cell1 = board.querySelector(`.cell[data-row='${r1}'][data-col='${c1}']`);
      const boardRect = board.getBoundingClientRect(), rect1 = cell1.getBoundingClientRect();
      const x1 = rect1.left - boardRect.left + rect1.width / 2, y1 = rect1.top - boardRect.top + rect1.height / 2;
      const x2 = (c2 - c1) * (rect1.width + 5) + x1, y2 = (r2 - r1) * (rect1.height + 5) + y1;
      const length = Math.hypot(x2 - x1, y2 - y1);
      const angle = Math.atan2(y2 - y1, x2 - x1) * (180 / Math.PI);
      const line = document.createElement("div");
      line.className = "line"; line.style.width = `${length}px`; line.style.transform = `translate(${x1}px, ${y1}px) rotate(${angle}deg)`; line.style.background = players[currentPlayer].color; line.style.boxShadow = `0 0 10px 2px ${players[currentPlayer].color}`;
      board.appendChild(line);
    }

    function updateTurn() {
        const player = players[currentPlayer];
        const turnDiv = document.getElementById("turnDisplay");
        turnDiv.textContent = `${player.name}'s Turn`; turnDiv.style.color = player.color;
        turnDiv.style.transform = 'scale(1.1)';
        setTimeout(() => turnDiv.style.transform = 'scale(1)', 300);

        document.getElementById('p1Card').classList.toggle('active', currentPlayer === 0);
        document.getElementById('p2Card').classList.toggle('active', currentPlayer === 1);
    }

    function updateScores() {
      document.getElementById("p1Score").textContent = `Score: ${players[0].score}`;
      document.getElementById("p2Score").textContent = `Score: ${players[1].score}`;
    }

    function showWinner() {
      gameActive = false; const msg = document.getElementById("endMessage"); let winnerText = "";
      playSound(winSound);
      if (players[0].score > players[1].score) winnerText = `Congratulations ${players[0].name} wins!`;
      else if (players[1].score > players[0].score) winnerText = `Congratulations ${players[1].name} wins!`;
      else winnerText = `It's a Draw!`;
      msg.innerHTML = winnerText; msg.classList.add('show');
      localStorage.removeItem("sosGameSetup"); document.getElementById("resumeBtn").style.display = "none";

      setTimeout(() => {
          msg.classList.remove('show');
      }, 2500); // Message stays for 2.5 seconds
    }

    function resetGame() { localStorage.removeItem("sosGameSetup"); gameArea.style.display = "none"; setupScreen.style.display = "flex"; }
    
    // --- AI LOGIC ---
    function computerMove() {
        if (!gameActive) return;
        playSound(aiTurnSound);

        let bestMove = findBestMove();
        
        if (bestMove) {
            selectLetter(bestMove.letter);
            handleMove(bestMove.r, bestMove.c);
        } else {
            // Fallback to random move if no strategic move is found
            let emptyCells = [];
            for (let r = 0; r < boardSize; r++) {
                for (let c = 0; c < boardSize; c++) {
                    if (!grid[r][c]) emptyCells.push({r, c});
                }
            }
            if (emptyCells.length > 0) {
                const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                selectLetter(Math.random() < 0.5 ? 'S' : 'O');
                handleMove(randomCell.r, randomCell.c);
            }
        }
    }

    function findBestMove() {
        // 1. Find a move that scores for the AI
        for (let r = 0; r < boardSize; r++) {
            for (let c = 0; c < boardSize; c++) {
                if (!grid[r][c]) {
                    // Try placing 'O' first as it can complete SOS
                    if (wouldScore(r, c, 'O', grid)) return {r, c, letter: 'O'};
                    if (wouldScore(r, c, 'S', grid)) return {r, c, letter: 'S'};
                }
            }
        }

        // 2. Find a move to block the player from scoring
        for (let r = 0; r < boardSize; r++) {
            for (let c = 0; c < boardSize; c++) {
                if (!grid[r][c]) {
                    if (wouldScore(r, c, 'O', grid, true)) return {r, c, letter: 'O'}; // Block with O
                    if (wouldScore(r, c, 'S', grid, true)) return {r, c, letter: 'S'}; // Block with S
                }
            }
        }

        // 3. Make a random move (handled in computerMove as fallback)
        return null;
    }

    function wouldScore(r, c, letter, currentGrid, forOpponent = false) {
        // Create a temporary grid to check potential moves
        let tempGrid = currentGrid.map(row => [...row]);
        tempGrid[r][c] = letter;

        const dirs = [ [0, 1], [1, 0], [1, 1], [1, -1], [-1,-1], [-1,0], [-1,1], [0,-1] ];
        const o_dirs = [ [0, 1], [1, 0], [1, 1], [1, -1] ];

        if (letter === 'O') {
            for (let [dr, dc] of o_dirs) {
                const r_b = r - dr, c_b = c - dc, r_a = r + dr, c_a = c + dc;
                if(inBounds(r_b, c_b) && inBounds(r_a, c_a) && tempGrid[r_b][c_b] === 'S' && tempGrid[r_a][c_a] === 'S') return true;
            }
        } else { // 'S'
            for (let [dr, dc] of dirs) {
                const r_m = r + dr, c_m = c + dc, r_e = r + 2 * dr, c_e = c + 2 * dc;
                if(inBounds(r_m, c_m) && inBounds(r_e, c_e) && tempGrid[r_m][c_m] === 'O' && tempGrid[r_e][c_e] === 'S') return true;
            }
        }
        return false;
    }

    // --- KEYBOARD AND TOUCH CONTROLS ---
    document.addEventListener('keydown', handleKeyPress);

    function handleKeyPress(e) {
        // Only process keys if the game area is visible and the game is active
        if (!gameActive || gameArea.style.display === 'none') return;
        
        // Prevent default browser behavior for game keys (e.g., scrolling with arrows)
        const relevantKeys = ['w', 'a', 's', 'd', 'y', 'u', 'W', 'A', 'S', 'D', 'Y', 'U', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Insert', 'Delete'];
        if (relevantKeys.includes(e.key)) {
            e.preventDefault();
        }

        let moved = false;
        let r = highlightedCell.r;
        let c = highlightedCell.c;

        // --- MOVEMENT ---
        // Player 1's turn (WASD)
        if (currentPlayer === 0) { 
            if (e.key.toLowerCase() === 'w') { r = Math.max(0, r - 1); moved = true; }
            else if (e.key.toLowerCase() === 's') { r = Math.min(boardSize - 1, r + 1); moved = true; }
            else if (e.key.toLowerCase() === 'a') { c = Math.max(0, c - 1); moved = true; }
            else if (e.key.toLowerCase() === 'd') { c = Math.min(boardSize - 1, c + 1); moved = true; }
        } 
        // Player 2's turn in PvP mode (Arrow Keys)
        else if (currentPlayer === 1 && gameMode === 'pvp') { 
            if (e.key === 'ArrowUp') { r = Math.max(0, r - 1); moved = true; }
            else if (e.key === 'ArrowDown') { r = Math.min(boardSize - 1, r + 1); moved = true; }
            else if (e.key === 'ArrowLeft') { c = Math.max(0, c - 1); moved = true; }
            else if (e.key === 'ArrowRight') { c = Math.min(boardSize - 1, c + 1); moved = true; }
        }

        if (moved) {
            // Update highlight only if the cell has changed
            if (highlightedCell.r !== r || highlightedCell.c !== c) {
                highlightedCell = { r, c };
                updateHighlight();
            }
            return; // Do not process actions on the same keypress as movement
        }

        // --- ACTIONS (Place Letter) ---
        // Player 1's turn (Y for S, U for O)
        if (currentPlayer === 0) { 
            if (e.key.toLowerCase() === 'y') {
                selectLetter('S');
                handleMove(highlightedCell.r, highlightedCell.c);
            } else if (e.key.toLowerCase() === 'u') {
                selectLetter('O');
                handleMove(highlightedCell.r, highlightedCell.c);
            }
        } 
        // Player 2's turn in PvP mode (Insert for S, Delete for O)
        else if (currentPlayer === 1 && gameMode === 'pvp') { 
            if (e.key === 'Insert') {
                selectLetter('S');
                handleMove(highlightedCell.r, highlightedCell.c);
            } else if (e.key === 'Delete') {
                selectLetter('O');
                handleMove(highlightedCell.r, highlightedCell.c);
            }
        }
    }
</script>

</body>
</html>